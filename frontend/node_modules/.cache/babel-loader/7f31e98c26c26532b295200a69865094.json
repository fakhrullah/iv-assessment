{"ast":null,"code":"export async function getDrivers(officeLocation, count) {\n  const queryString = new URLSearchParams();\n  queryString.append('latitude', officeLocation.lat.toString());\n  queryString.append('longitude', officeLocation.lng.toString());\n\n  if (count) {\n    queryString.append('count', count === null || count === void 0 ? void 0 : count.toString());\n  }\n\n  const getDriversUrl = 'http://localhost:3020/drivers?' + queryString;\n  const myRequest = new Request(getDriversUrl, {\n    method: 'GET'\n  });\n  const response = await fetch(myRequest);\n  const respJson = await response.json();\n  const fetchedDriversData = respJson.drivers;\n\n  const mapDataToDriverModel = driversData => {\n    return driversData.map(driver => ({\n      id: driver['driver_id'],\n      location: {\n        lat: driver.location.latitude,\n        lng: driver.location.longitude\n      },\n      bearing: driver.location.bearing\n    }));\n  };\n\n  return mapDataToDriverModel(fetchedDriversData);\n}\nexport async function getDriverById() {\n  throw new Error('Not implement yet');\n}","map":{"version":3,"sources":["/home/fakhrullah/Projects/splyt-assessment-latest-fs_tech-task-q1k21/frontend/src/services/driver_service_impl.ts"],"names":["getDrivers","officeLocation","count","queryString","URLSearchParams","append","lat","toString","lng","getDriversUrl","myRequest","Request","method","response","fetch","respJson","json","fetchedDriversData","drivers","mapDataToDriverModel","driversData","map","driver","id","location","latitude","longitude","bearing","getDriverById","Error"],"mappings":"AAGA,OAAO,eAAeA,UAAf,CAA0BC,cAA1B,EAA2DC,KAA3D,EAAmG;AAExG,QAAMC,WAAW,GAAG,IAAIC,eAAJ,EAApB;AAEAD,EAAAA,WAAW,CAACE,MAAZ,CAAmB,UAAnB,EAA+BJ,cAAc,CAACK,GAAf,CAAmBC,QAAnB,EAA/B;AACAJ,EAAAA,WAAW,CAACE,MAAZ,CAAmB,WAAnB,EAAgCJ,cAAc,CAACO,GAAf,CAAmBD,QAAnB,EAAhC;;AAEA,MAAIL,KAAJ,EAAW;AACTC,IAAAA,WAAW,CAACE,MAAZ,CAAmB,OAAnB,EAA4BH,KAA5B,aAA4BA,KAA5B,uBAA4BA,KAAK,CAAEK,QAAP,EAA5B;AACD;;AAED,QAAME,aAAa,GAAG,mCAAmCN,WAAzD;AAEA,QAAMO,SAAS,GAAG,IAAIC,OAAJ,CAAYF,aAAZ,EAA2B;AAC3CG,IAAAA,MAAM,EAAE;AADmC,GAA3B,CAAlB;AAIA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,SAAD,CAA5B;AACA,QAAMK,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACA,QAAMC,kBAAkB,GAAGF,QAAQ,CAACG,OAApC;;AAEA,QAAMC,oBAAoB,GAAIC,WAAD,IAAuC;AAClE,WAAOA,WAAW,CAACC,GAAZ,CAAiBC,MAAD,KAAa;AAClCC,MAAAA,EAAE,EAAED,MAAM,CAAC,WAAD,CADwB;AAElCE,MAAAA,QAAQ,EAAE;AACRlB,QAAAA,GAAG,EAAEgB,MAAM,CAACE,QAAP,CAAgBC,QADb;AAERjB,QAAAA,GAAG,EAAEc,MAAM,CAACE,QAAP,CAAgBE;AAFb,OAFwB;AAMlCC,MAAAA,OAAO,EAAEL,MAAM,CAACE,QAAP,CAAgBG;AANS,KAAb,CAAhB,CAAP;AAQD,GATD;;AAWA,SAAOR,oBAAoB,CAACF,kBAAD,CAA3B;AACD;AAED,OAAO,eAAeW,aAAf,GAAqD;AAC1D,QAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD","sourcesContent":["import { CoordinateModel } from \"../models/CoordinateModel\";\nimport { DriverModel } from \"../models/DriverModel\"\n\nexport async function getDrivers(officeLocation: CoordinateModel, count?: number): Promise<DriverModel[]> {\n\n  const queryString = new URLSearchParams();\n\n  queryString.append('latitude', officeLocation.lat.toString());\n  queryString.append('longitude', officeLocation.lng.toString());\n\n  if (count) {\n    queryString.append('count', count?.toString());\n  }\n\n  const getDriversUrl = 'http://localhost:3020/drivers?' + queryString;\n\n  const myRequest = new Request(getDriversUrl, {\n    method: 'GET',\n  });\n\n  const response = await fetch(myRequest);\n  const respJson = await response.json();\n  const fetchedDriversData = respJson.drivers;\n\n  const mapDataToDriverModel = (driversData: any[]): DriverModel[] => {\n    return driversData.map((driver) => ({\n      id: driver['driver_id'],\n      location: {\n        lat: driver.location.latitude,\n        lng: driver.location.longitude\n      },\n      bearing: driver.location.bearing\n    }))\n  }\n\n  return mapDataToDriverModel(fetchedDriversData);\n}\n\nexport async function getDriverById(): Promise<DriverModel> {\n  throw new Error('Not implement yet');\n}"]},"metadata":{},"sourceType":"module"}