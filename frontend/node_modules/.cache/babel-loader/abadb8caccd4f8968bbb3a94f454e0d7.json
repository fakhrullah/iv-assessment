{"ast":null,"code":"var _jsxFileName = \"/home/fakhrullah/Projects/splyt-assessment-latest-fs_tech-task-q1k21/frontend/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport GoogleMapReact from 'google-map-react';\nimport Marker, { MarkerStyle } from './components/Marker';\nimport { offices } from './data/offices';\nimport { useQuery } from 'react-query';\nimport { getDrivers } from './services/driver_service_fake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  REACT_APP_GOOGLE_MAP_API_KEY = ''\n} = process.env;\n\nfunction App() {\n  _s();\n\n  var _driverQuery$data;\n\n  const [officeData, setOfficeData] = useState(offices[0]);\n  const [carCount, setCarCount] = useState(50);\n  const [refreshRateSeconds, setRefreshRateSeconds] = useState(5);\n  const zoom = 11;\n\n  const getCurrentOffice = slug => offices.find(ofc => ofc.slug === slug) || offices[0];\n\n  const driverQuery = useQuery(['drivers', officeData, carCount], () => getDrivers(officeData.location, carCount), {\n    initialData: [],\n    refetchInterval: refreshRateSeconds * 1000 // convert to milliseconds\n\n  });\n\n  const onLocationChange = e => {\n    setOfficeData({ ...officeData,\n      ...getCurrentOffice(e.target.value)\n    }); // driverQuery.refetch({});\n  }; // TODO: Optimization - Only call when user confirm set number, so that less burden for backend API\n  // TODO: Optimization - Filter number in local data because we already have the data\n\n\n  const onCarCountChange = e => {\n    setCarCount(parseInt(e.target.value));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [driverQuery.isRefetching && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        width: '40px',\n        height: '40px',\n        backgroundColor: 'blue'\n      },\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Choose location:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: onLocationChange,\n        children: offices.map(office => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: office.slug,\n          children: office.name\n        }, office.slug, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Slider car number:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: carCount,\n        onChange: onCarCountChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '320px'\n      },\n      children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: REACT_APP_GOOGLE_MAP_API_KEY\n        },\n        defaultCenter: offices[0].location,\n        defaultZoom: zoom,\n        yesIWantToUseGoogleMapApiInternals: true,\n        center: officeData.location,\n        children: [/*#__PURE__*/_jsxDEV(Marker, {\n          text: officeData.name,\n          lat: officeData.location.lat,\n          lng: officeData.location.lng,\n          markerStyle: MarkerStyle.office\n        }, officeData.slug, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), (_driverQuery$data = driverQuery.data) === null || _driverQuery$data === void 0 ? void 0 : _driverQuery$data.map(driver => /*#__PURE__*/_jsxDEV(Marker, {\n          text: driver.id,\n          lat: driver.location.lat,\n          lng: driver.location.lng,\n          markerStyle: MarkerStyle.car\n        }, driver.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Refresh rate interval:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CVBnmw+eyv03kX9YAteU7hhMECQ=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/fakhrullah/Projects/splyt-assessment-latest-fs_tech-task-q1k21/frontend/src/App.tsx"],"names":["React","useState","GoogleMapReact","Marker","MarkerStyle","offices","useQuery","getDrivers","REACT_APP_GOOGLE_MAP_API_KEY","process","env","App","officeData","setOfficeData","carCount","setCarCount","refreshRateSeconds","setRefreshRateSeconds","zoom","getCurrentOffice","slug","find","ofc","driverQuery","location","initialData","refetchInterval","onLocationChange","e","target","value","onCarCountChange","parseInt","isRefetching","position","width","height","backgroundColor","map","office","name","key","lat","lng","data","driver","id","car"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport GoogleMapReact from 'google-map-react';\nimport Marker, { MarkerStyle } from './components/Marker';\nimport { OfficeModel } from './models/OfficeModel';\nimport { offices } from './data/offices'\nimport { useQuery } from 'react-query';\nimport { getDrivers } from './services/driver_service_fake';\n\nconst { REACT_APP_GOOGLE_MAP_API_KEY = '' } = process.env;\n\nfunction App() {\n  \n  const [officeData, setOfficeData] = useState<OfficeModel>(offices[0]);\n  const [carCount, setCarCount] = useState<number>(50);\n  const [refreshRateSeconds, setRefreshRateSeconds] = useState<number>(5)\n\n  const zoom = 11;\n\n  const getCurrentOffice = (slug: string): OfficeModel => offices\n    .find((ofc) => ofc.slug === slug) || offices[0];\n\n  const driverQuery = useQuery(\n    ['drivers', officeData, carCount],\n    () => getDrivers(officeData.location, carCount),\n    {\n      initialData: [],\n      refetchInterval: refreshRateSeconds * 1000, // convert to milliseconds\n    }\n  );\n\n  const onLocationChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setOfficeData({...officeData, ...getCurrentOffice(e.target.value)});\n    // driverQuery.refetch({});\n  }\n\n  // TODO: Optimization - Only call when user confirm set number, so that less burden for backend API\n  // TODO: Optimization - Filter number in local data because we already have the data\n  const onCarCountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCarCount(parseInt(e.target.value));\n  }\n\n  return (\n    <div className=\"App\">\n      {driverQuery.isRefetching && \n        <div style={{position: 'absolute', width: '40px', height: '40px', backgroundColor:'blue'}}> </div>\n        }\n      <div>\n        Choose location:\n        <select\n          onChange={onLocationChange}\n          >\n          {\n            offices\n              .map((office) => (\n                <option \n                key={office.slug} \n                value={office.slug}\n                >{office.name}</option>\n              ))\n          }\n        </select>\n      </div>\n\n      <div>Slider car number:\n        {' '}\n        <input type=\"number\" value={carCount} onChange={onCarCountChange}/>\n      </div>\n\n      <div style={{width: '100%', height: '320px'}}>\n        <GoogleMapReact\n           bootstrapURLKeys={{ key: REACT_APP_GOOGLE_MAP_API_KEY}}\n           defaultCenter={offices[0].location}\n           defaultZoom={zoom}\n           yesIWantToUseGoogleMapApiInternals\n           center={officeData.location}\n          >\n            <Marker\n                key={officeData.slug}\n                text={officeData.name}\n                lat={officeData.location.lat}\n                lng={officeData.location.lng}\n                markerStyle={MarkerStyle.office}\n              />\n\n      {driverQuery.data?.map((driver) => (\n        <Marker\n          key={driver.id}\n          text={driver.id}\n          lat={driver.location.lat}\n          lng={driver.location.lng}\n          markerStyle={MarkerStyle.car}\n          />\n      ))}\n        </GoogleMapReact>\n      </div>\n\n      <div>\n        Refresh rate interval: \n        {' '}\n        <input type=\"number\"/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}